// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace AppConfiguration
{
    public partial class KeyValue : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("key");
            writer.WriteStringValue(Key);
            writer.WritePropertyName("label");
            writer.WriteStringValue(Label);
            writer.WritePropertyName("content_type");
            writer.WriteStringValue(Content_type);
            writer.WritePropertyName("value");
            writer.WriteStringValue(Value);
            writer.WritePropertyName("last_modified");
            writer.WriteStringValue(Last_modified);
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("locked");
            writer.WriteBooleanValue(Locked);
            writer.WritePropertyName("etag");
            writer.WriteStringValue(Etag);
            writer.WriteEndObject();
        }

        internal static KeyValue DeserializeKeyValue(JsonElement element)
        {
            string key = default;
            string label = default;
            string contentType = default;
            string value = default;
            DateTimeOffset lastModified = default;
            IDictionary<string, string> tags = default;
            bool locked = default;
            string etag = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("key"))
                {
                    key = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("content_type"))
                {
                    contentType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("last_modified"))
                {
                    lastModified = property.Value.GetDateTimeOffset();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("locked"))
                {
                    locked = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
            }
            return new KeyValue(key, label, contentType, value, lastModified, tags, locked, etag);
        }

        internal RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }

        internal static KeyValue FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeKeyValue(document.RootElement);
        }
    }
}
